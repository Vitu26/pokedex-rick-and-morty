// Mocks generated by Mockito 5.4.5 from annotations
// in pokedex/test/view_models/character_detail_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedex/models/api_response.dart' as _i2;
import 'package:pokedex/models/character.dart' as _i3;
import 'package:pokedex/services/rick_and_morty_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0 extends _i1.SmartFake implements _i2.ApiResponse {
  _FakeApiResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCharacter_1 extends _i1.SmartFake implements _i3.Character {
  _FakeCharacter_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RickAndMortyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyService extends _i1.Mock
    implements _i4.RickAndMortyService {
  MockRickAndMortyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void enableMockData() => super.noSuchMethod(
    Invocation.method(#enableMockData, []),
    returnValueForMissingStub: null,
  );

  @override
  void disableMockData() => super.noSuchMethod(
    Invocation.method(#disableMockData, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.ApiResponse> getCharacters({int? page = 1}) =>
      (super.noSuchMethod(
            Invocation.method(#getCharacters, [], {#page: page}),
            returnValue: _i5.Future<_i2.ApiResponse>.value(
              _FakeApiResponse_0(
                this,
                Invocation.method(#getCharacters, [], {#page: page}),
              ),
            ),
          )
          as _i5.Future<_i2.ApiResponse>);

  @override
  _i5.Future<_i3.Character> getCharacterById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCharacterById, [id]),
            returnValue: _i5.Future<_i3.Character>.value(
              _FakeCharacter_1(
                this,
                Invocation.method(#getCharacterById, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.Character>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
